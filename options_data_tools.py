import numpy as np


def add_forward(data, trade_date_col='trade_date', exp_date_col='exp_date', strike_col='strike',
                cp_col='cp', price_col='price', days_to_exp_col='days_to_exp', rate_col='rate',
                new_forward_col='forward'):
    """ Calculate forward price using put-call parity and add it to DataFrame
    :param data: unindexed input DataFrame containing all fields
    :param trade_date_col: column name of trade/quote dates
    :param exp_date_col: column name of expiration dates
    :param strike_col: column name of strikes
    :param cp_col: column name of call-put indicator (can be Boolean or 'C' and 'P')
    :param price_col: column name of option premiums
    :param days_to_exp_col: column name of numerical days to expiration
    :param rate_col: column name of risk-free rates (in percent)
    :param new_forward_col: name for forward column generated by this function
    :return: unindexed DataFrame that is copy of input plus forward column
    """
    data_indexed = data.set_index([trade_date_col, exp_date_col, strike_col]).sort_index()
    if data_indexed[cp_col].dtypes == bool:
        # Boolean style: True means "call", False means "put"
        is_call = data_indexed[cp_col]
    else:
        # String style: 'C' means "call", 'P' means "put"
        is_call = data_indexed[cp_col] == 'C'
    # Create DataFrame with only strikes with both call and put (need both for forward)
    calls = data_indexed.loc[is_call]
    puts = data_indexed.loc[~is_call]
    cp_df = calls[[price_col]].join(puts[[price_col]], how='inner', lsuffix='_C', rsuffix='_P')
    # Determine current strikes for each series at which call price and put price are closest
    cp_df['c_minus_p'] = cp_df[price_col+'_C'] - cp_df[price_col+'_P']
    cp_df['abs_c_minus_p'] = cp_df['c_minus_p'].abs()
    cp_df_noindex = cp_df.reset_index()
    min_abs_c_minus_p_idx = cp_df_noindex.groupby([trade_date_col, exp_date_col])['abs_c_minus_p'].idxmin()
    c_minus_p_min_df = (cp_df_noindex.loc[min_abs_c_minus_p_idx]
                                     .set_index([trade_date_col, exp_date_col, strike_col]))
    # Join days to expiration and risk-free rate back in
    c_minus_p_min_df = (c_minus_p_min_df.join(calls[[days_to_exp_col, rate_col]], how='inner')
                                        .reset_index(strike_col))
    # Calculate forward and inner join it back to full data
    k = c_minus_p_min_df[strike_col]
    r = c_minus_p_min_df[rate_col]/100
    t = c_minus_p_min_df[days_to_exp_col]/365
    c_p = c_minus_p_min_df['c_minus_p']
    forward_df = k + np.exp(-r*t)*c_p
    data_indexed_with_forward = data_indexed.join(forward_df.rename(new_forward_col), how='inner')
    return data_indexed_with_forward.reset_index()
