# Adapted from code by Pierre Boutquin of Stack Overflow
# https://stackoverflow.com/questions/33094297/create-trading-holiday-calendar-with-pandas

import pandas as pd
from pandas.tseries.holiday import \
    AbstractHolidayCalendar, Holiday, MO, nearest_workday, sunday_to_monday, \
    USMartinLutherKingJr, USPresidentsDay, GoodFriday, USMemorialDay, USLaborDay, USThanksgivingDay, \
    get_calendar

# Additional holidays
NewYearsDay = Holiday('New Year\'s Day', month=1, day=1, observance=sunday_to_monday)
USIndependenceDay = Holiday('Independence Day', month=7, day=4, observance=nearest_workday)
USColumbusDay = Holiday('Columbus Day', month=10, day=1, offset=pd.DateOffset(weekday=MO(2)))
USVeteransDay = Holiday('Veterans Day', month=11, day=11, observance=sunday_to_monday)
ChristmasDay = Holiday('Christmas', month=12, day=25, observance=nearest_workday)
GHWBushDayofMourning = Holiday('George H. W. Bush Day of Mourning', year=2018, month=12, day=5)


# Cboe's trading calendar; should be the same as NYSE
# Source: http://cfe.cboe.com/about-cfe/holiday-calendar
# NOTE: if Jan 1 is on a Saturday, New Year's Day is technically not observed,
#       though it is still listed in the holidays list generated by this
#       calendar; it should never matter though, as it's already a weekend
class CboeTradingCalendar(AbstractHolidayCalendar):
    def __init__(self):
        AbstractHolidayCalendar.__init__(self)
        self.rules = [
            NewYearsDay,
            USMartinLutherKingJr,
            USPresidentsDay,
            GoodFriday,
            USMemorialDay,
            USIndependenceDay,
            USLaborDay,
            USThanksgivingDay,
            ChristmasDay
        ]


# FICC's GSD business calendar, AKA days on which treasury notes can be delivered
# NOTE: observes federal holidays (Columbus and Veterans Day) AND Good Friday 
# NOTE: empirically, we see it observed Bush Sr. Day of Mourning but NOT Ford's
#       DoM (2007-01-02) or Hurricane Sandy
class FICCGSDBusinessCalendar(CboeTradingCalendar):
    def __init__(self):
        CboeTradingCalendar.__init__(self)
        self.rules.extend([USColumbusDay, USVeteransDay, GHWBushDayofMourning])


# Given a calendar retrieval function and year, return a list of the year's holidays
def _get_holidays(cal, year, fancy=False):
    return cal.holidays(pd.Timestamp(year, 1, 1), pd.Timestamp(year, 12, 31), fancy)


# Given a year, return a list of the year's Cboe exchange holidays
def get_cboe_holidays(year):
    cboe_cal = get_calendar('CboeTradingCalendar')
    return _get_holidays(cboe_cal, year)


# Given a year, return a list of the year's FICC's GSD business holidays
def get_ficcgsd_holidays(year):
    ficcgsd_cal = get_calendar('FICCGSDBusinessCalendar')
    return _get_holidays(ficcgsd_cal, year)


###############################################################################

if __name__ == '__main__':
    print("2011:\n{}".format(get_cboe_holidays(2011)))
    print("2016:\n{}".format(get_cboe_holidays(2016)))
    print("2019:\n{}".format(get_cboe_holidays(2019)))
    print("2022:\n{}".format(get_cboe_holidays(2022)))

# =============================================================================
# # Expected results
# 2011:
# DatetimeIndex(['2011-01-01', '2011-01-17', '2011-02-21', '2011-04-22',
#                '2011-05-30', '2011-07-04', '2011-09-05', '2011-11-24',
#                '2011-12-26'],
#               dtype='datetime64[ns]', freq=None)
# 2016:
# DatetimeIndex(['2016-01-01', '2016-01-18', '2016-02-15', '2016-03-25',
#                '2016-05-30', '2016-07-04', '2016-09-05', '2016-11-24',
#                '2016-12-26'],
#               dtype='datetime64[ns]', freq=None)
# 2019:
# DatetimeIndex(['2019-01-01', '2019-01-21', '2019-02-18', '2019-04-19',
#                '2019-05-27', '2019-07-04', '2019-09-02', '2019-11-28',
#                '2019-12-25'],
#               dtype='datetime64[ns]', freq=None)
# 2022:
# DatetimeIndex(['2022-01-01', '2022-01-17', '2022-02-21', '2022-04-15',
#                '2022-05-30', '2022-07-04', '2022-09-05', '2022-11-24',
#                '2022-12-26'],
#               dtype='datetime64[ns]', freq=None)
# =============================================================================
